play {
  i18n.langs=["en", "en-US"]

  crypto.secret="development"

  modules {
    enabled += "play.filters.csrf.CSRFModule"
    enabled += "play.filters.cors.CORSModule"
    enabled += "play.filters.headers.SecurityHeadersModule"
  }

  http {
    # This ensures all errors & exceptions are returned as JSON to the client.
    errorHandler = "com.teambytes.hipchat.sns.bridge.controllers.handlers.JsonErrorHandler"

    # Adds logging, escaping & tracing to requests & responses
    filters = "com.teambytes.hipchat.sns.bridge.controllers.filters.GlobalFilters"
  }

  filters {
    csrf {
      token {
        name = "csrfToken"
        # Whether tokens should be signed or not
        sign = true
      }

      cookie {
        # If non null, the CSRF token will be placed in a cookie with this name
        name = "csrf-hipchat-sns-bridge"
        secure = true
        httpOnly = false
      }

      header {
        # The name of the header to accept CSRF tokens from.
        name = "Csrf-Token"
        # Whether simple tokens in the header should allow CSRF checks to be bypassed.
        bypass = true
      }

      method {
        # If non empty, then requests will be checked if the method is not in this list.
        whiteList = []
        # The black list is only used if the white list is empty. Only check methods in this list.
        blackList = ["POST","PUT","PATCH"]
      }

      contentType {
        # If non empty, then requests will be checked if the content type is not in this list.
        whiteList = []
        # The black list is only used if the white list is empty. Only check content types in this list.
        blackList = ["application/json"]
      }

      # The error handler.
      # Used by Play's built in DI support to locate and bind a request handler.  Must be one of the following:
      # - A FQCN that implements play.filters.csrf.CSRF.ErrorHandler (Scala).
      # - A FQCN that implements play.filters.csrf.CSRFErrorHandler (Java).
      # - provided, indicates that the application has bound an instance of play.filters.csrf.CSRF.ErrorHandler through some
      #   other mechanism.
      # If null, will attempt to load a class called CSRFErrorHandler in the root package, otherwise if that's
      # not found, will default to play.filters.csrf.CSRF.CSRFHttpErrorHandler, which delegates to the configured
      # HttpRequestHandler.
      errorHandler = null
    }

    cors {
      # The path prefixes to filter.
      pathPrefixes = ["/"]
      # The allowed origins. If null, all origins are allowed.
      allowedOrigins = null
      # The allowed HTTP methods. If null, all methods are allowed
      allowedHttpMethods = null
      # The allowed HTTP headers. If null, all headers are allowed.
      allowedHttpHeaders = null
      # The exposed headers
      exposedHeaders = []
      # Whether to support credentials
      supportsCredentials = true
      # The maximum amount of time the CORS meta data should be cached by the client
      preflightMaxAge = 1 hour
    }

    # Security headers filter configuration
    headers {
      # The X-Frame-Options header. If null, the header is not set.
      frameOptions = "DENY"
      # The X-XSS-Protection header. If null, the header is not set.
      xssProtection = "1; mode=block"
      # The X-Content-Type-Options header. If null, the header is not set.
      contentTypeOptions = "nosniff"
      # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
      permittedCrossDomainPolicies = "master-only"
      # The Content-Security-Policy header. If null, the header is not set.
      contentSecurityPolicy = "default-src 'self'"
    }
  }
}

akka {
  akka.loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = WARNING
  actor {
    default-dispatcher = {
      fork-join-executor {
        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        parallelism-factor = 1.0
        parallelism-min = 10 # Min number of threads to cap factor-based parallelism number to
        parallelism-max = 24 # Max number of threads to cap factor-based parallelism number to
        # Setting this to LIFO changes the fork-join-executor
        # to use a stack discipline for task scheduling. This usually
        # improves throughput at the cost of possibly increasing
        # latency and risking task starvation (which should be rare).
        task-peeking-mode = FIFO
      }
    }
  }
}

